[{"categories":["documentation","Hugo"],"content":"部署hugo博客 [TOC] 1.准备环境 安装依赖的工具： Git Mercurial Go 1.3+ (Go 1.4+ on Windows) ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:0:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"安装git yum -y install git git config --global user.name \"xxx\" git config --global user.email \"xxx\" ssh-keygen -t rsa -C \"xxx\" cat /root/.ssh/id_rsa.pub ssh git@github.com #Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed. #测试ssh密钥链接 将id_rsa.pub 公钥内容复制到github上 ， Settings \u003e SSH and GPG keys \u003e New SSH key ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:1:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"安装Go 官网下载地址：https://go.dev/dl/ wget https://go.dev/dl/go1.19.3.linux-amd64.tar.gz tar xf go1.19.3.linux-amd64.tar.gz -C /usr/local/ echo 'export PATH=$PATH:/usr/local/go/bin' \u003e\u003e /etc/profile source /etc/profile go version 2.Hugo部署 ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:2:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"1.下载Hugo https://gohugo.io/getting-started/installing/ https://github.com/gohugoio/hugo/releases wget https://github.com/gohugoio/hugo/releases/download/v0.105.0/hugo_0.105.0_Linux-64bit.tar.gz mkdir /usr/local/hugo tar xf hugo_0.105.0_Linux-64bit.tar.gz -C /usr/local/hugo/ #解压后，文件夹中就会有个hugo绿色的文件，就是hugo的执行程序，不然hugo执行找不到路径 cp /usr/local/hugo/hugo /usr/local/bin/ hugo version ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:3:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"2.生成站点 hugo new site path #path表示要安装的路径，如：/data/my_blog #站点目录结构 ├── archetypes # markdown文章的模版,包括文章前缀注释写法 │ └── default.md ├── config.toml # 配置文件 ├── content # 网站内容，主要保存文章 ├── data # 生成网站可用的数据文件，可用在模版中 ├── layouts # 生成网站时可用的模版 ├── public # 通过hugo命令生成的静态文件，这是我们网站真正要发布的目录 ├── static # 静态文件，比如favicon等图标, 以及site.xml等, 将来其下的子目录和文件会在生成时候会自动复制到 public 目录中. └── themes # 保存可用的hugo主题 ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:4:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"3.安装主题 安装完成后，hugo是没有默认的主题的，可以去主题官网上下载主题：https://gohugo.io/commands/hugo/，如：maupassant主题https://themes.gohugo.io/hyde-hyde/，每个主题进去之后都会有安装的方法和预览演示的效果。 直接clone主题到云服务器上的themes下 官方主题：https://themes.gohugo.io/ 安装LoveIt主题 https://github.com/dillonzq/LoveIt cd /data/my_blog git init git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt cp -r themes/LoveIt/exampleSite/* ./ cp -r themes/LoveIt/i18n ./ 首先进入myblog\\themes\\LoveIt\\exampleSite目录下，复制config.toml文件，将其粘贴至myblog下以替换原有的config.toml文件，使用notepad++或者其他文本编辑器打开myblog目录下的config.toml文件，修改baseURL，themeDir以及enableGitinfo三行内容如下： aseURL = \"https://example.com\" ## 修改为你的github.io地址，格式为：https://yourusername.github.io # [en, zh-cn, fr, pl, ...] determines default content language # [en, zh-cn, fr, pl, ...] 设置默认的语言 defaultContentLanguage = \"zh-cn\" # theme # 主题 theme = \"LoveIt\" # themes directory # 主题目录 #themesDir = \"../..\" ## 注释掉该行 # website title # 网站标题 title = \"LoveIt\" # whether to use robots.txt # 是否使用 robots.txt enableRobotsTXT = true # whether to use git commit log # 是否使用 git 信息 enableGitInfo = false ## 由true改为false # whether to use emoji code # 是否使用 emoji 代码 enableEmoji = true 如果是 clone 了其他人的博客项目进行修改，则需要用以下命令进行初始化： git submodule update --init --recursive 如果需要同步主题仓库的最新修改，需要运行以下命令： git submodule update --remote 初始化主题基础配置后，我们可以在 config.toml 文件中进行站点细节配置，具体配置项参考各主题说明文档。 完成后，可以通过 hugo new 命令发布新文章。 hugo new posts/blog-test.md ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:5:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","Hugo"],"content":"4.查看效果 Hugo 会生成静态网页，我们在本地编辑调试时可以通过 hugo server 命令进行本地实时调试预览，无须每次都重新生成。 hugo server -D --disableFastRender 现在localhost:1313在浏览器的地址栏中输入 win下可能会出现报错： 运行以下命令： git commit --allow-empty -m \"first commit\" 3.推送Github 生成静态页面 hugo -D 配置public文件夹的github cd /data/my_blog/public git init #初始化 git remote add origin git@github.com:xinian888/xinian888.github.io.git #本地仓库与GitHub上的仓库进行关 git add . #把所以东西全部加进去 git commit -m \"我的hugo博客第一次提交\" #提交信息，把文件全部加到本地仓库里去 git push -u origin main #把文件推上去 #同步本地仓库和远程仓库的代码 git pull --rebase origin main #查看git全程仓库地址： git remote get-url origin #更换远程仓库地址： git remote set-url origin 地址 报错：git push -u origin main 会报错 error: src refspec main does not match any error: failed to push some refs to ‘github.com:xinian888/xinian888.github.io.git’ 解决方法：git branch -M main #将本地master分支修改为main 4.配置GitHub Pages 如果github pages 没有生效，可以查看 Actions ","date":"2022-11-06","objectID":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/:6:0","tags":["Hugo"],"title":"Hugo博客安装","uri":"/hugo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85/"},{"categories":["documentation","docker"],"content":"docker安装搭建loki+promtail+grafana 收集容器日志\r安装部署docker环境 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:0:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"1.卸载旧版本 旧版本的 Docker 被称为docker或docker-engine. 如果安装了这些，请卸载它们以及相关的依赖项。 yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:1:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"2.安装docker 您可以根据需要以不同的方式安装 Docker Engine： 大多数用户 设置 Docker 的存储库并从中安装，以便于安装和升级任务。这是推荐的方法。 一些用户下载 RPM 包并 手动安装它并完全手动管理升级。这在诸如在无法访问 Internet 的气隙系统上安装 Docker 等情况下很有用。 在测试和开发环境中，一些用户选择使用自动化 便利脚本来安装 Docker。 安装yum-utils包（提供yum-config-manager 实用程序）并设置存储库。 yum install -y yum-utils yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum clean all \u0026\u0026 yum makecache yum install -y docker-ce 列出并排序您的存储库中可用的版本。此示例按版本号从最高到最低对结果进行排序，并被截断： $ yum list docker-ce --showduplicates | sort -r docker-ce.x86_64 3:18.09.1-3.el7 docker-ce-stable docker-ce.x86_64 3:18.09.0-3.el7 docker-ce-stable docker-ce.x86_64 18.06.1.ce-3.el7 docker-ce-stable docker-ce.x86_64 18.06.0.ce-3.el7 docker-ce-stable 返回的列表取决于启用了哪些存储库，并且特定于您的 CentOS 版本（.el7在本例中由后缀表示）。 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:2:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"3.启动docker systemctl start docker systemctl enable docker ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:3:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"4.安装docker-compose工具 #国外 curl -L https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose #国内 curl -L https://get.daocloud.io/docker/compose/releases/download/v2.10.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose docker-compose --version docker-compose 版本：https://github.com/docker/compose/releases 安装部署Grafana Loki ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:4:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"1.Grafana Loki介绍 Grafana Loki 是什么？ Loki 是一个水平可扩展，高可用性，多租户的 日志聚合系统 。它的设计非常经济高效且易于操作，因为它不会为日志内容编制索引，而是为每个日志流编制一组标签。 Loki 组成： loki : 主服务器，负责存储日志和处理查询 promtail : 代理，负责收集日志并将其发送给 loki Grafana : Go语言开发的开源数据可视化工具，可以做数据监控和数据统计，带有告警功能 官网：https://grafana.com/oss/loki Loki : https://github.com/grafana/loki 与其他日志聚合系统相比，Loki具有下面的一些特性： 不对日志进行全文索引（vs ELK技）。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。 通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。 特别适合储存 Kubernetes Pod 日志; 诸如 Pod 标签之类的元数据会被自动删除和编入索引。受 Grafana 原生支持。 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:5:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"2.系统架构 Promtail收集并将日志发送给Loki的 Distributor 组件 Distributor会对接收到的日志流进行正确性校验，并将验证后的日志分批并行发送到Ingester Ingester 接受日志流并构建数据块，压缩后存放到所连接的存储后端 Querier 收到HTTP查询请求，并将请求发送至Ingester 用以获取内存数据 ，Ingester 收到请求后返回符合条件的数据 ； 如果 Ingester 没有返回数据，Querier 会从后端存储加载数据并遍历去重执行查询 ，通过HTTP返回查询结果。 Loki与ELK比较 ELK功能丰富，但是架构复杂，资源占用高，很多功能系统用不上，造成很多资源浪费。 ELK进行全文索引。安装部署复杂。 Loki不对日志全文索引。通过存储压缩非结构化日志和仅索引元数据，Loki 操作起来会更简单，更省成本。 Loki通过使用与 Prometheus 相同的标签记录流对日志进行索引和分组，这使得日志的扩展和操作效率更高。 Loki安装部署简单快速，且受 Grafana 原生支持。 假如系统依赖于ES，建议使用ELK作为日志系统。若系统不依赖ES，选择用Loki。 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:6:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"3.安装部署 Loki 官网安装文档 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:7:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"3.1使用docker安装 #创建目录 mkdir -p /data/loki/conf cd /data/loki/conf #下载配置文件 wget https://raw.githubusercontent.com/grafana/loki/v2.6.1/cmd/loki/loki-local-config.yaml -O loki-config.yaml wget https://raw.githubusercontent.com/grafana/loki/v2.6.1/clients/cmd/promtail/promtail-docker-config.yaml -O promtail-config.yaml 修改loki-config配置文件 vim loki-config.yaml auth_enabled: false server: http_listen_port: 3100 grpc_listen_port: 9096 grpc_server_max_recv_msg_size: 15728640 #grpc最大接收消息值，默认4m grpc_server_max_send_msg_size: 15728640 #grpc最大发送消息值，默认4m common: path_prefix: /tmp/loki storage: filesystem: chunks_directory: /tmp/loki/chunks rules_directory: /tmp/loki/rules replication_factor: 1 ring: instance_addr: 127.0.0.1 kvstore: store: inmemory schema_config: configs: - from: 2020-10-24 store: boltdb-shipper object_store: filesystem schema: v11 index: prefix: index_ period: 24h limits_config: enforce_metric_name: false reject_old_samples: true reject_old_samples_max_age: 168h ingestion_rate_mb: 30 ingestion_burst_size_mb: 15 chunk_store_config: max_look_back_period: 168h #回看日志行的最大时间，只适用于即时日志 table_manager: retention_deletes_enabled: true #日志保留周期开关，默认为false retention_period: 168h #日志保留周期 ruler: alertmanager_url: http://localhost:9093 修改promtail的配置文件 vim promtail-config.yaml server: http_listen_port: 9080 grpc_listen_port: 0 positions: filename: /tmp/positions.yaml sync_period: 10s #10秒钟同步一次 #Loki服务器的地址，修改IP和端口即可，后面Grafana要从这个地方取数据 clients: - url: http://YOUR_IP:3100/loki/api/v1/push # 数据抓取配置 scrape_configs: - job_name: system #任务名称，应该具有唯一性 static_configs: - targets: - localhost #抓取目标，本地 labels: job: varlogs #标签名，用于筛选数据，最好取一个易于识别的名称 __path__: /var/log/*log #收集日志的路径，“*”是通配符，支持正则匹配 安装Loki docker run --name loki -d -v $(pwd):/mnt/config -p 3100:3100 grafana/loki:2.6.1 -config.file=/mnt/config/loki-config.yaml #查看metrics数据 http://IP:3100/metrics #查看loki运行状态 http://IP:3100/ready 安装promtail docker run --name promtail -d -v $(pwd):/mnt/config -v /var/log:/var/log --link loki grafana/promtail:2.6.1 -config.file=/mnt/config/promtail-config.yaml 安装grafana docker run -d --name grafana \\ --restart always \\ --privileged=true \\ --user root \\ -p 3000:3000 \\ -v /data/loki/grafana-storage:/var/lib/grafana \\ grafana/grafana 安装报错： GF_PATHS_DATA=’/var/lib/grafana’ is not writable. You may have issues with file permissions, more information here: http://docs.grafana.org/installation/docker/#migrate-to-v51-or-later mkdir: can’t create directory ‘/var/lib/grafana/plugins’: Permission denied 解决办法： 启动容器时加上一行 --user root 打开 http://IP:3000 访问grafana，默认用户密码为admin/admin。 选择左侧设置—\u003eData Sources—\u003eAdd data source，搜索Loki配置HTTP URL为 http://IP:3100 完成后选择左侧设置—\u003ePreferences，修改底部默认时区为 Asia/Shanghai。 选择左侧Explore查看日志，可以基于文件名或标签查看. ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:7:1","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"3.2 使用docker-compose安装 mkdir -p /data/{loki,loki-config,promtail-config,grafana-data} mkdir /var/log/promtail /data/ ├── docker-compose.yaml ├── docker-compose.yaml.bak ├── grafana-data ├── loki ├── loki-config │ └── local-config.yaml └── promtail-config └── config.yml 修改loki配置文件 local-config.yaml auth_enabled: false server: http_listen_port: 3100 grpc_listen_port: 9096 grpc_server_max_recv_msg_size: 15728640 #grpc最大接收消息值，默认4m grpc_server_max_send_msg_size: 15728640 #grpc最大发送消息值，默认4m common: path_prefix: /loki storage: filesystem: chunks_directory: /loki/chunks rules_directory: /loki/rules replication_factor: 1 ring: instance_addr: 127.0.0.1 kvstore: store: inmemory schema_config: configs: - from: 2020-10-24 store: boltdb-shipper object_store: filesystem schema: v11 index: prefix: index_ period: 24h limits_config: enforce_metric_name: false reject_old_samples: true reject_old_samples_max_age: 168h ingestion_rate_mb: 30 ingestion_burst_size_mb: 15 chunk_store_config: max_look_back_period: 168h #回看日志行的最大时间，只适用于即时日志 table_manager: retention_deletes_enabled: true #日志保留周期开关，默认为false retention_period: 168h #日志保留周期 ruler: alertmanager_url: http://localhost:9093 下载docker-compose.yml cd /data wget https://raw.githubusercontent.com/grafana/loki/v2.6.1/production/docker-compose.yaml -O docker-compose.yaml 修改docker-compose.yml version: \"3\" networks: loki: services: loki: image: grafana/loki:2.6.1 container_name: loki environment: - TZ=Asia/Shanghai - LANG=zh_CN.UTF-8 restart: always privileged: true user: root ports: - \"3100:3100\" volumes: - \"/data/loki-config:/etc/loki\" - \"/data/loki:/loki\" command: -config.file=/etc/loki/local-config.yaml networks: - loki promtail: image: grafana/promtail:2.6.1 container_name: promtail environment: - TZ=Asia/Shanghai - LANG=zh_CN.UTF-8 restart: always privileged: true user: root volumes: - \"/var/log/promtail:/var/log\" - \"/data/promtail-config:/etc/promtail\" command: -config.file=/etc/promtail/config.yml networks: - loki grafana: image: grafana/grafana:latest container_name: grafana environment: - TZ=Asia/Shanghai - LANG=zh_CN.UTF-8 restart: always privileged: true user: root ports: - \"3000:3000\" volumes: - \"/data/grafana-data:/var/lib/grafana\" networks: - loki 启动 docker-compose -f docker-compose.yaml up -d 配置grafana 打开 http://IP:3000 访问grafana，默认用户密码为admin/admin。 选择左侧设置—\u003eData Sources—\u003eAdd data source，搜索Loki配置HTTP URL为 http://IP:3100 完成后选择左侧设置—\u003ePreferences，修改底部默认时区为 Asia/Shanghai。 选择左侧Explore查看日志，可以基于文件名或标签查看. 监控docker日志 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:7:2","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"1.被监控机器安装Loki日志插件 docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions docker plugin ls 当有新版本时, 更新plugins docker plugin disable loki --force docker plugin upgrade loki grafana/loki-docker-driver:latest --grant-all-permissions docker plugin enable loki systemctl restart docker ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:8:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["documentation","docker"],"content":"2.全局日志搜集设置 对于loki的docker plugin有两种使用方式 配置daemon.json,收集此后创建的所有容器的日志(注意，是配置daemon.json后重启docker服务后创建的容器才会把日志输出到loki)。 新建容器时指定logging类型为loki，这样只有指定了logging的容器才会输出到loki 编辑daemon.json。linux下默认路径是/etc/docker/daemon.json (需要sudo)， windows则默认是%userprofile%.docker\\daemon.json vim /etc/docker/daemon.json { \"log-driver\": \"loki\", \"log-opts\": { \"loki-url\": \"http://YOUR_IP:3100/loki/api/v1/push\", \"loki-batch-size\": \"400\", \"max-size\": \"50m\", \"max-file\": \"10\" } } systemctl daemon-reload systemctl restart docker 好用的grafana模板下载 https://grafana.com/dashboards Spring Boot Statistics 6756 1 Node Exporter for Prometheus Dashboard EN 20201010 11074 Docker and system monitoring 893 Docker Container \u0026 Host Metrics 10619 ","date":"2022-11-06","objectID":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/:9:0","tags":["docker","k8s","loki"],"title":"Docker安装搭建loki+promtail+grafana收集容器日志","uri":"/docker%E5%AE%89%E8%A3%85%E6%90%AD%E5%BB%BAloki-promtail-grafana%E6%94%B6%E9%9B%86%E5%AE%B9%E5%99%A8%E6%97%A5%E5%BF%97/"},{"categories":["KubeSphere","documentation"],"content":"概念 多节点集群由至少一个主节点和一个工作节点组成。您可以使用任何节点作为任务机来执行安装任务，也可以在安装之前或之后根据需要新增节点（例如，为了实现高可用性）。 Control plane node：主节点，通常托管控制平面，控制和管理整个系统。 Worker node：工作节点，运行部署在工作节点上的实际应用程序。 步骤 1：准备 Linux 主机 硬件推荐配置 操作系统 最低配置 Ubuntu 16.04, 18.04 2 核 CPU，4 GB 内存，40 GB 磁盘空间 Debian Buster, Stretch 2 核 CPU，4 GB 内存，40 GB 磁盘空间 CentOS 7.x 2 核 CPU，4 GB 内存，40 GB 磁盘空间 Red Hat Enterprise Linux 7 2 核 CPU，4 GB 内存，40 GB 磁盘空间Debian Buster, Stretch SUSE Linux Enterprise Server 15/openSUSE Leap 15.2 2 核 CPU，4 GB 内存，40 GB 磁盘空间Debian Buster, Stretch 依赖项要求 KubeKey 可以将 Kubernetes 和 KubeSphere 一同安装。针对不同的 Kubernetes 版本，需要安装的依赖项可能有所不同。您可以参考以下列表，查看是否需要提前在节点上安装相关的依赖项。 依赖项 Kubernetes 版本 ≥ 1.18 Kubernetes 版本 \u003c 1.18 socat 必须 可选但建议 conntrack 必须 可选但建议 ebtables 可选但建议 可选但建议 ipset 可选但建议 可选但建议 项目准备 主机 IP 主机名 角色 10.0.0.200 control plane control plane, etcd 10.0.0.201 node01 worker 10.0.0.202 node02 worker+harbor 节点要求 所有节点必须都能通过 SSH 访问。 所有节点时间同步。 所有节点都应使用 sudo/curl/openssl/tar。 配置所有节点ssh互相访问： 1.三台机器分别执行以下命令 ssh-keygen 2.查看公钥 cat id_rsa.pub 3.把公钥加入到authorized_keys文件 [root@master ~/.ssh]# cat authorized_keys ssh-rsa xxx root@master ssh-rsa xxx root@node01 ssh-rsa xxx root@node02 4.验证 ssh 10.0.0.201 hostname ssh 10.0.0.202 hostname 步骤 2：下载 KubeKey 提前准备工作： #关闭防火墙 systemctl stop firewalld systemctl disable firewalld #关闭 selinux sentenforce 0 sed -i 's/enforcing/disabled/' /etc/selinux/config #关闭 swap swapoff -a #临时 sed -ri 's/.*swap.*/#\u0026/' /etc/fstab #永久 下载 KubeKey： #创建kk目录 mkdir /data \u0026\u0026 cd /data #如果您能正常访问 GitHub/Googleapis curl -sfL https://get-kk.kubesphere.io | VERSION=v2.2.1 sh - #如果您访问 GitHub/Googleapis 受限 export KKZONE=cn curl -sfL https://get-kk.kubesphere.io | VERSION=v2.2.1 sh - #为 kk 添加可执行权限： chmod +x kk 步骤 3：创建集群 对于多节点安装，您需要通过指定配置文件来创建集群。 ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:0:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"1. 创建示例配置文件 命令如下： ./kk create config --with-kubernetes v1.22.10 --with-kubesphere v3.3.0 ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:1:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"2. 编辑配置文件 如果您不更改名称，那么将创建默认文件 config-sample.yaml。编辑文件，以下是多节点集群（具有一个主节点）配置文件的示例。 apiVersion: kubekey.kubesphere.io/v1alpha2 kind: Cluster metadata: name: sample spec: hosts: - {name: master, address: 10.0.0.200, internalAddress: 10.0.0.200, privateKeyPath: \"~/.ssh/id_rsa\"} - {name: node01, address: 10.0.0.201, internalAddress: 10.0.0.201, privateKeyPath: \"~/.ssh/id_rsa\"} - {name: node02, address: 10.0.0.202, internalAddress: 10.0.0.202, privateKeyPath: \"~/.ssh/id_rsa\"} roleGroups: etcd: - master control-plane: - master worker: - node01 - node02 registry: - node02 network: plugin: calico kubePodsCIDR: 10.233.64.0/18 kubeServiceCIDR: 10.233.0.0/18 ## multus support. https://github.com/k8snetworkplumbingwg/multus-cni multusCNI: enabled: false registry: type: harbor privateRegistry: \"\" namespaceOverride: \"\" registryMirrors: [] insecureRegistries: [] addons: [] alerting: enabled: true #告警系统 auditing: enabled: true #审计日志 devops: enabled: true #devops openpitrix: store: enabled: true #应用商店 备注： roleGroups etcd：etcd 节点名称 control-plane：主节点名称 worker：工作节点名称 使用 SSH 密钥的无密码登录示例： hosts: - {name: master, address: 10.0.0.200, internalAddress: 10.0.0.200, privateKeyPath: \"~/.ssh/id_rsa\"} ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:2:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"3. 使用配置文件创建集群 备注：每个节点安装依赖项 yum install -y socat conntrack ebtables ipset 安装集群 ./kk create cluster -f config-sample.yaml ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:3:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"4. 验证安装 执行以下命令查看集群状态： kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l 'app in (ks-install, ks-installer)' -o jsonpath='{.items[0].metadata.name}') -f 报错：提示 -bash: kubectl: command not found ，这里配置环境变量使之生效 [root@master ~]# whereis is kubectl [root@master ~]# vim /etc/profile 最后一行加入 export PATH=\"/usr/local/bin/:$PATH\" [root@master ~]# source /etc/profile 安装完成后，您会看到如下内容： ##################################################### ### Welcome to KubeSphere! ### ##################################################### Console: http://10.0.0.200:30880 Account: admin Password: P@88w0rd NOTES： 1. After you log into the console, please check the monitoring status of service components in the \"Cluster Management\". If any service is not ready, please wait patiently until all components are up and running. 2. Please change the default password after login. ##################################################### https://kubesphere.io 20xx-xx-xx xx:xx:xx ##################################################### 现在，您可以通过 \u003cNodeIP:30880 使用默认帐户和密码 (admin/P@88w0rd) 访问 KubeSphere 的 Web 控制台。 步骤 4：启用 kubectl 自动补全 KubeKey 不会启用 kubectl 自动补全功能，请参见以下内容并将其打开： 备注： 请确保已安装 bash-autocompletion 并可以正常工作。 # Install bash-completion apt-get install bash-completion # Source the completion script in your ~/.bashrc file echo 'source \u003c(kubectl completion bash)' \u003e\u003e~/.bashrc # Add the completion script to the /etc/bash_completion.d directory kubectl completion bash \u003e/etc/bash_completion.d/kubectl 步骤 5：安装内网穿透工具 ZeroTier ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:4:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"1.注册账号 访问：https://www.zerotier.com/ 注册账号； ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:5:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"2.创建虚拟网络 点击“Create A Network”创建一个虚拟网络： 记住Network ID，后边会用到； Name随便写； Access Control选择：PRIVATE； ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:6:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"3.配置网段 IPV4 Auto-Assign 选择“Easy”，然后从下发的网段选择一个即可； 这里选择的是10.242..，上方的Managed Routes会自动修改为：10.242.0.0/16 (LAN); 表示：10.242.*.*的虚拟网段，由ZeroTier进行路由转发； 剩下部分保留默认配置即可；接下来配置客户端。 ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:7:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"4.客户端配置 下载并安装ZeroTier客户端：https://www.zerotier.com/download/ 按照官网提示，安装ZeroTier客户端即可； curl -s https://install.zerotier.com | sudo bash 若需要，可以通过以下命令获取设备的address地址： cat /var/lib/zerotier-one/identity.public |cut -d : -f 1 配置客户端，加入虚拟网络： zerotier-cli join \u003cNetwork ID\u003e MacOS和Windows系统，打开客户端，粘贴Network ID，然后点击“Join Network”： 回到管理UI，找到刚刚申请加入的设备，点击左侧的“Auth?”复选框，给新加入的设备授权： “Name”随便写； “Managed IPs”，输入“10.242.0.0”至“10.242.255.255”之间的任意IP，网段对应上一步创建的网段即可； 点击“Managed IPs”左侧的“+”，生成虚拟IP； 客户端配置完成；可以回到客户端，查看是否正常： 将多个设备加入虚拟网络；如果是云服务器，记得开放相应的端口； 多个设备之间，可以使用虚拟IP互联； ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:8:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":["KubeSphere","documentation"],"content":"5.moon节点配置 官方的节点，速度比较慢；可以通过自建中继节点（moon）的方式，提高连接速度； 自建的moon节点服务器必须有外网IP，才有意义； 在Linux的服务器上，配置moon服务器： cd /var/lib/zerotier-one #生成moon zerotier-idtool initmoon identity.public \u003e\u003emoon.json 修改 moon.json文件的id地址、stableEndpoints值 \"id\": \"12345678\", \"stableEndpoints\": [\"1.2.3.4/9993\"] 启动moon服务器： #生成签名文件 zerotier-idtool genmoon moon.json #会生成类似：000000xxxxxxxx.moon的文件 #将 moon 节点加入网络 mkdir moons.d cp 000000xxxxxxxx.moon /moons.d/ systemctl restart zerotier-one.service 其他客户端连接moon服务器： #Linux #连接moon节点： #注意这里的12345678为上边moon.json里的id #orbit后边跟两个id zerotier-cli orbit 12345678 12345678 如果是Windows系统： C:\\Program Files (x86)\\ZeroTier\\One\u003e .\\zerotier-cli.bat orbit 12345678 12345678 查看节点连接信息： zerotier-cli listpeers #结果中可以看到新加入的moon节点； #如果没有，可以稍等一会； 卸载Zerotier-one 1.通过dpkg删除zerotier-one服务 dpkg -P zerotier-one 2.删除zerotier-one文件夹，该文件夹存储了address地址，删除后再次安装会获得新的address地址 rm -rf /var/lib/zerotier-one/ ","date":"2022-11-05","objectID":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/:9:0","tags":["KubeSphere","k8s"],"title":"1.多节点安装ks+k8s","uri":"/1.%E5%A4%9A%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85ks-k8s/"},{"categories":null,"content":"关于 LoveIt","date":"2019-08-02","objectID":"/about/","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"  LoveIt 是一个由  Dillon 开发的简洁、优雅且高效的 Hugo 博客主题。 它的原型基于 LeaveIt 主题 和 KeepIt 主题。 Hugo 主题 LoveIt\r","date":"2019-08-02","objectID":"/about/:0:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特性 ","date":"2019-08-02","objectID":"/about/:1:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"性能和 SEO  性能优化：在 Google PageSpeed Insights 中， 99/100 的移动设备得分和 100/100 的桌面设备得分  使用基于 JSON-LD 格式 的 SEO SCHEMA 文件进行 SEO 优化  支持 Google Analytics  支持 Fathom Analytics  支持 Plausible Analytics  支持 Yandex Metrica  支持搜索引擎的网站验证 (Google, Bind, Yandex and Baidu)  支持所有第三方库的 CDN  基于 lazysizes 自动转换图片为懒加载 ","date":"2019-08-02","objectID":"/about/:1:1","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"外观和布局  桌面端/移动端 响应式布局  浅色/深色 主题模式  全局一致的设计语言  支持分页  易用和自动展开的文章目录  支持多语言和国际化  美观的 CSS 动画 社交和评论系统  支持 Gravatar 头像  支持本地头像  支持多达 73 种社交链接  支持多达 24 种网站分享  支持 Disqus 评论系统  支持 Gitalk 评论系统  支持 Valine 评论系统  支持 Facebook comments 评论系统  支持 Telegram comments 评论系统  支持 Commento 评论系统  支持 utterances 评论系统  支持 giscus 评论系统 ","date":"2019-08-02","objectID":"/about/:1:2","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"扩展功能  支持基于 Lunr.js 或 algolia 的搜索  支持 Twemoji  支持代码高亮  一键复制代码到剪贴板  支持基于 lightGallery 的图片画廊  支持 Font Awesome 图标的扩展 Markdown 语法  支持上标注释的扩展 Markdown 语法  支持分数的扩展 Markdown 语法  支持基于 $\\KaTeX$ 的数学公式  支持基于 mermaid 的图表 shortcode  支持基于 ECharts 的交互式数据可视化 shortcode  支持基于 Mapbox GL JS 的 Mapbox shortcode  支持基于 APlayer 和 MetingJS 的音乐播放器 shortcode  支持 Bilibili 视频 shortcode  支持多种注释的 shortcode  支持自定义样式的 shortcode  支持自定义脚本的 shortcode  支持基于 TypeIt 的打字动画 shortcode  支持基于 cookieconsent 的 Cookie 许可横幅  支持人物标签的 shortcode … ","date":"2019-08-02","objectID":"/about/:1:3","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"许可协议 LoveIt 根据 MIT 许可协议授权。 更多信息请查看 LICENSE 文件。 ","date":"2019-08-02","objectID":"/about/:2:0","tags":null,"title":"关于 LoveIt","uri":"/about/"},{"categories":null,"content":"特别感谢 LoveIt 主题中用到了以下项目，感谢它们的作者： normalize.css Font Awesome Simple Icons Animate.css autocomplete Lunr.js algoliasearch lazysizes object-fit-images Twemoji emoji-data lightGallery clipboard.js Sharer.js TypeIt $\\KaTeX$ mermaid ECharts Mapbox GL JS APlayer MetingJS Gitalk Valine cookieconsent ","date":"2019-08-02","objectID":"/about/:3:0","tags":null,"title":"关于 LoveIt","uri":"/about/"}]